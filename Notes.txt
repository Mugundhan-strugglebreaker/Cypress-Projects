Introduction:
 		Test Automation Tool
		Can Test anything that runs on a web browser 
		Write tests in Javascript and TypeScript 
		Does not use Selenium
		Open Source
		cypress.io

Cypress test runs on javascript and also any language that transpiles down to javascript like TypeScript 


Using Cypress
        Setup tests
	Write tests
      	Runs tests
	Debug

Features
 	Time Travel takes snapshots as your tests run.
  	Debugging readable errors and stack traces.
	Automatic Waiting automatically waits for commands and assertions before moving on
	Consistent Results doesn’t use selenium or web drivers. Fast, consistent and reliable
	Screenshot and videos get screenshots and videos
	Cross browser testing locally or remote (CI CD)

Cypress enables 
  	End to End tests
	Integration tests
	Units Tests

Assertions in Cypress
       Implicit —> in-built assertions (Command in cypress like should() check for the excepted conditions without having to use any assert or except command separately.
	Explicit —> Not in built or referred (have to use specific assertions commands like assert() and expect()

Implicit —> should() & and()
Explicit —> assert() & excepts()
 

 Implicit errors as well success notif was shown in electron 
 Explicit only displays if there is any error not passed cases

 Page Object Model
	A design principle
	Keep the objects and methods separate from test scripts.
	Efficient reusability
	Easier, Efficient and Faster changes and Maintenance.

App Actions
	—> What are app actions
			Shortcuts in app
			provide users with quick ways to navigate to specific activities  in app
			we can change the state of the app without any user interactions.

YouTube link : https://www.youtube.com/watch?v=YWEqHQucvEs&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&index=15

		example 
		  like cy.window().then( ({app}) => {
			app.loggedIn.active = true;
		  })
		  this step will skip the login or signup inorder to test the intermediate pages

Group tests in cypress
 	Group all of the it block inside the describe block.


for running test in CLI
	npx cypress run
	it will capture screenshots if there any test case failed

for running separate file in CLI we can use
    npx cypress run -s cypress/e2e/file.cy.js -b electron

    cypress run --config or -c pageLoadTimeout=10000, watchForFileChanges= false
	or
	cypress run -c '{ "watchForFileChanges" : false, "pageLoadTimeout" : 1000}'

	npx cypress verify --> verfication

	npx cypress version

	npx cypress info  -> info about cypress and browser

	npx cypress cache

package.json 
   script configuration pretest , test, post test


    ~1.2.3 will install 1.2.* but not 1.3.0
	^1.2.3 will install 1.2.* as well as 1.*.* but not 2.0.0
	
	Do we need both package.json and package-lock.json ? No
	Do we need package.json ? Yes
	Does package-lock.json is enough ? No